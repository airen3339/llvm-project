; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple x86_64-pc-linux < %s | FileCheck %s

define i8 @atomicrmw_cond_sub_i8(ptr %ptr, i8 %val) {
; CHECK-LABEL: atomicrmw_cond_sub_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzbl (%rdi), %eax
; CHECK-NEXT:    movzbl %sil, %ecx
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB0_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %edx
; CHECK-NEXT:    subb %cl, %dl
; CHECK-NEXT:    movzbl %dl, %edx
; CHECK-NEXT:    cmovbl %ecx, %edx
; CHECK-NEXT:    lock cmpxchgb %dl, (%rdi)
; CHECK-NEXT:    jne .LBB0_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw cond_sub ptr %ptr, i8 %val seq_cst
  ret i8 %result
}

define i16 @atomicrmw_cond_sub_i16(ptr %ptr, i16 %val) {
; CHECK-LABEL: atomicrmw_cond_sub_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB1_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %ecx
; CHECK-NEXT:    subw %si, %cx
; CHECK-NEXT:    cmovbl %esi, %ecx
; CHECK-NEXT:    lock cmpxchgw %cx, (%rdi)
; CHECK-NEXT:    jne .LBB1_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw cond_sub ptr %ptr, i16 %val seq_cst
  ret i16 %result
}

define i32 @atomicrmw_cond_sub_i32(ptr %ptr, i32 %val) {
; CHECK-LABEL: atomicrmw_cond_sub_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl (%rdi), %eax
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB2_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %ecx
; CHECK-NEXT:    subl %esi, %ecx
; CHECK-NEXT:    cmovbl %esi, %ecx
; CHECK-NEXT:    lock cmpxchgl %ecx, (%rdi)
; CHECK-NEXT:    jne .LBB2_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw cond_sub ptr %ptr, i32 %val seq_cst
  ret i32 %result
}

define i64 @atomicrmw_cond_sub_i64(ptr %ptr, i64 %val) {
; CHECK-LABEL: atomicrmw_cond_sub_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq (%rdi), %rax
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB3_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movq %rax, %rcx
; CHECK-NEXT:    subq %rsi, %rcx
; CHECK-NEXT:    cmovbq %rsi, %rcx
; CHECK-NEXT:    lock cmpxchgq %rcx, (%rdi)
; CHECK-NEXT:    jne .LBB3_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw cond_sub ptr %ptr, i64 %val seq_cst
  ret i64 %result
}

define i8 @atomicrmw_sub_clamp_i8(ptr %ptr, i8 %val) {
; CHECK-LABEL: atomicrmw_sub_clamp_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzbl (%rdi), %eax
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB4_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %edx
; CHECK-NEXT:    subb %sil, %dl
; CHECK-NEXT:    movzbl %dl, %edx
; CHECK-NEXT:    cmovbl %ecx, %edx
; CHECK-NEXT:    lock cmpxchgb %dl, (%rdi)
; CHECK-NEXT:    jne .LBB4_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw sub_clamp ptr %ptr, i8 %val seq_cst
  ret i8 %result
}

define i16 @atomicrmw_sub_clamp_i16(ptr %ptr, i16 %val) {
; CHECK-LABEL: atomicrmw_sub_clamp_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB5_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %edx
; CHECK-NEXT:    subw %si, %dx
; CHECK-NEXT:    cmovbl %ecx, %edx
; CHECK-NEXT:    lock cmpxchgw %dx, (%rdi)
; CHECK-NEXT:    jne .LBB5_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw sub_clamp ptr %ptr, i16 %val seq_cst
  ret i16 %result
}

define i32 @atomicrmw_sub_clamp_i32(ptr %ptr, i32 %val) {
; CHECK-LABEL: atomicrmw_sub_clamp_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl (%rdi), %eax
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB6_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movl %eax, %edx
; CHECK-NEXT:    subl %esi, %edx
; CHECK-NEXT:    cmovbl %ecx, %edx
; CHECK-NEXT:    lock cmpxchgl %edx, (%rdi)
; CHECK-NEXT:    jne .LBB6_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw sub_clamp ptr %ptr, i32 %val seq_cst
  ret i32 %result
}

define i64 @atomicrmw_sub_clamp_i64(ptr %ptr, i64 %val) {
; CHECK-LABEL: atomicrmw_sub_clamp_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq (%rdi), %rax
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB7_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    movq %rax, %rdx
; CHECK-NEXT:    subq %rsi, %rdx
; CHECK-NEXT:    cmovbq %rcx, %rdx
; CHECK-NEXT:    lock cmpxchgq %rdx, (%rdi)
; CHECK-NEXT:    jne .LBB7_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    retq
  %result = atomicrmw sub_clamp ptr %ptr, i64 %val seq_cst
  ret i64 %result
}
