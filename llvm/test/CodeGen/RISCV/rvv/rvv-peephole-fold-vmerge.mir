# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 3
# RUN: llc %s -o - -mtriple=riscv64 -mattr=+v -run-pass=riscv-fold-masks \
# RUN:     -verify-machineinstrs | FileCheck %s

---
name: vmerge_unmasked
body: |
  bb.0:
    liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-LABEL: name: vmerge_unmasked
    ; CHECK: liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %avl:gprnox0 = COPY $x1
    ; CHECK-NEXT: %false:vrnov0 = COPY $v8
    ; CHECK-NEXT: %mask:vmv0 = COPY $v0
    ; CHECK-NEXT: $v0 = COPY %mask
    ; CHECK-NEXT: %true:vrnov0 = PseudoVADD_VV_M1_MASK %false, $v9, $v10, $v0, %avl, 5 /* e32 */, 1 /* ta, mu */
    %avl:gprnox0 = COPY $x1
    %false:vr = COPY $v8
    %true:vr = PseudoVADD_VV_M1 $noreg, $v9, $v10, %avl, 5, 3
    %mask:vmv0 = COPY $v0
    $v0 = COPY %mask
    %x:vrnov0 = PseudoVMERGE_VVM_M1 $noreg, %false, %true, $v0, %avl, 5
...
---
name: vmerge_masked
body: |
  bb.0:
    liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-LABEL: name: vmerge_masked
    ; CHECK: liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %avl:gprnox0 = COPY $x1
    ; CHECK-NEXT: %false:vrnov0 = COPY $v8
    ; CHECK-NEXT: %addmask:vmv0 = COPY $v0
    ; CHECK-NEXT: $v0 = COPY %addmask
    ; CHECK-NEXT: %mergemask:vmv0 = PseudoVMSET_M_B8 %avl, 5 /* e32 */
    ; CHECK-NEXT: %true:vrnov0 = PseudoVADD_VV_M1_MASK %false, $v9, $v10, $v0, %avl, 5 /* e32 */, 0 /* tu, mu */
    ; CHECK-NEXT: $v0 = COPY %mergemask
    %avl:gprnox0 = COPY $x1
    %false:vrnov0 = COPY $v8
    %addmask:vmv0 = COPY $v0
    $v0 = COPY %addmask
    %true:vrnov0 = PseudoVADD_VV_M1_MASK %false, $v9, $v10, $v0, %avl, 5, 0
    %mergemask:vmv0 = PseudoVMSET_M_B8 %avl, 5
    $v0 = COPY %mergemask
    %x:vrnov0 = PseudoVMERGE_VVM_M1 %false, %false, %true, $v0, %avl, 5
...
---
name: vmv_unmasked
body: |
  bb.0:
    liveins: $x1, $v8, $v9, $v10
    ; CHECK-LABEL: name: vmv_unmasked
    ; CHECK: liveins: $x1, $v8, $v9, $v10
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %avl:gprnox0 = COPY $x1
    ; CHECK-NEXT: %false:vr = COPY $v8
    ; CHECK-NEXT: [[PseudoVMSET_M_B8_:%[0-9]+]]:vr = PseudoVMSET_M_B8 %avl, 5 /* e32 */
    ; CHECK-NEXT: $v0 = COPY [[PseudoVMSET_M_B8_]]
    ; CHECK-NEXT: %true:vr = PseudoVADD_VV_M1 %false, $v9, $v10, %avl, 5 /* e32 */, 0 /* tu, mu */
    %avl:gprnox0 = COPY $x1
    %false:vr = COPY $v8
    %true:vr = PseudoVADD_VV_M1 $noreg, $v9, $v10, %avl, 5, 3
    %x:vr = PseudoVMV_V_V_M1 %false, %true, %avl, 5, 0
...
---
name: vmv_masked
body: |
  bb.0:
    liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-LABEL: name: vmv_masked
    ; CHECK: liveins: $x1, $v0, $v8, $v9, $v10
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %avl:gprnox0 = COPY $x1
    ; CHECK-NEXT: %false:vrnov0 = COPY $v8
    ; CHECK-NEXT: %addmask:vmv0 = COPY $v0
    ; CHECK-NEXT: %true:vrnov0 = PseudoVADD_VV_M1_MASK %false, $v9, $v10, $v0, %avl, 5 /* e32 */, 0 /* tu, mu */
    ; CHECK-NEXT: $v0 = COPY %addmask
    %avl:gprnox0 = COPY $x1
    %false:vrnov0 = COPY $v8
    %addmask:vmv0 = COPY $v0
    $v0 = COPY %addmask
    %true:vrnov0 = PseudoVADD_VV_M1_MASK $noreg, $v9, $v10, $v0, %avl, 5, 3
    %x:vrnov0 = PseudoVMV_V_V_M1 %false, %true, %avl, 5, 0
...
---
# Shouldn't fold this because vadd is in another BB
name: different_bb
body: |
  ; CHECK-LABEL: name: different_bb
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x1, $v0, $v8, $v9, $v10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %avl:gprnox0 = COPY $x1
  ; CHECK-NEXT:   %false:vr = COPY $v8
  ; CHECK-NEXT:   %true:vr = PseudoVADD_VV_M1 $noreg, $v9, $v10, %avl, 5 /* e32 */, 3 /* ta, ma */
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %mask:vmv0 = COPY $v0
  ; CHECK-NEXT:   $v0 = COPY %mask
  ; CHECK-NEXT:   %x:vrnov0 = PseudoVMERGE_VVM_M1 $noreg, %false, %true, $v0, %avl, 5 /* e32 */
  bb.0:
    liveins: $x1, $v0, $v8, $v9, $v10
    %avl:gprnox0 = COPY $x1
    %false:vr = COPY $v8
    %true:vr = PseudoVADD_VV_M1 $noreg, $v9, $v10, %avl, 5, 3
  bb.1:
    %mask:vmv0 = COPY $v0
    $v0 = COPY %mask
    %x:vrnov0 = PseudoVMERGE_VVM_M1 $noreg, %false, %true, $v0, %avl, 5
